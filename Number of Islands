class Solution {
public:
    bool isValid(int i,int j,int row,int col,vector<vector<char>>& grid){
        if(i>=0 && i<row && j>=0 && j<col && grid[i][j]=='1')
         return true;

        return false;
    }
    void numsIslandsRec(int i,int j,int row,int col,vector<vector<char>>& grid){
        grid[i][j]='0';      //make that grid zero  to mark it as visited 
         
         //left
        if(isValid(i-1,j,row,col,grid))
          numsIslandsRec(i-1,j,row,col,grid);
        
        //right
        if(isValid(i+1,j,row,col,grid))
          numsIslandsRec(i+1,j,row,col,grid);

        //downward
        if(isValid(i,j+1,row,col,grid))
          numsIslandsRec(i,j+1,row,col,grid);

        //upward
        if(isValid(i,j-1,row,col,grid))
          numsIslandsRec(i,j-1,row,col,grid); 

    }
    int numIslands(vector<vector<char>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        int count=0;         //count the number of islands

        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]=='1'){
                    count++;
                    numsIslandsRec(i,j,row,col,grid);
                }
            }
        }
        return count;
    }
};
